(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{578:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("当你正在使用基于组件的技术时，一旦应用程序开始变大，就需要对组件进行结构化和分类，来使它们尽可能的简单和可维护。")]),s._v(" "),a("p",[s._v("组件组合是一个强大且流行的模式，可以帮助我们复用和构建基于组件的技术的代码...但是组件组合究竟是什么呢？虽然这是一个普通的概念，当您通过一个或者多个组件来创建组件的，你就可以说你正在进行组件组合。")]),s._v(" "),a("p",[s._v("例如，当我们有一个叫 "),a("code",[s._v("BaseList")]),s._v(" 的基本组件，然后你想创建一个类似的组件，并且在此之上添加一些其他功能，就像 "),a("code",[s._v("SortableList")]),s._v("。我称他们为"),a("strong",[s._v("自适应组件")]),s._v("（也可以称为代理或者包装组件）。")]),s._v(" "),a("p",[s._v("当构建一个自适应组件时，你通常希望 "),a("code",[s._v("SortableList")]),s._v(" 与原始的 "),a("code",[s._v("BaseList")]),s._v(" 保持相同的 API，以使组件保持一致。这意味着 "),a("code",[s._v("SortableList")]),s._v(" 你需要传递所有 props 和 "),a("code",[s._v("BaseList")]),s._v(" 监听的所有事件到 "),a("code",[s._v("BaseList")]),s._v("。")]),s._v(" "),a("p",[s._v("诀窍是：你可以使用 "),a("code",[s._v("v-bind")]),s._v(" 和 "),a("code",[s._v("v-on")]),s._v(" 来实现：")]),s._v(" "),a("div",{staticClass:"language-vue line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- SortableList  --\x3e")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("AppList")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("v-bind")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("$props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("v-on")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("$listeners"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- ... --\x3e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("AppList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" AppList "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./AppList"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    props"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" AppList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    components"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      AppList\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("code",[s._v("v-bind")]),s._v(" 的工作原理根本上与一个接一个地将所有 props 传递到 "),a("code",[s._v("AppList")]),s._v(" 一样，只是在一个对象中一次性传递了所有的 props。"),a("code",[s._v("$props")]),s._v(" 是组件实例中的包含了该组件所有 props 的对象。")]),s._v(" "),a("p",[s._v("可以想象，"),a("code",[s._v('v-on="$listeners"')]),s._v(" 工作原理完全相同，只是作用于事件。")]),s._v(" "),a("p",[s._v("这同样适用于使用了 "),a("code",[s._v("v-model")]),s._v(" 的双向绑定组件。如果你不知道，"),a("code",[s._v("v-model")]),s._v(" 是传递 "),a("code",[s._v("value")]),s._v(" 属性和监听 "),a("code",[s._v("input")]),s._v(" 事件的简写。")]),s._v(" "),a("p",[s._v("最后，请记住，在 Vue.js 中，我们必须显示声明组件的 props 才能被解析。创建自适应组件时，一种快速的方法是使用基本组件的 props 来定义它们，就像我在例子中所做的那样："),a("code",[s._v("props: AppList.props")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"原文链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原文链接"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://vuedose.tips/tips/adaptive-components-using-v-bind-and-v-on",target:"_blank",rel:"noopener noreferrer"}},[s._v("原文链接"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);