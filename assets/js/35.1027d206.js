(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{530:function(t,r,a){"use strict";a.r(r);var e=a(4),v=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("ol",[a("li",[t._v("iterator 作用")]),t._v(" "),a("li",[t._v("iterator 遍历过程")]),t._v(" "),a("li",[t._v("默认 iterator 接口")]),t._v(" "),a("li",[t._v("调用 iterator 场合")])])]),t._v(" "),a("h2",{attrs:{id:"iterator-作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-作用"}},[t._v("#")]),t._v(" iterator 作用")]),t._v(" "),a("ul",[a("li",[t._v("为各种数据接口（"),a("code",[t._v("Array")]),t._v("、"),a("code",[t._v("Object")]),t._v("，ES6 新增的 "),a("code",[t._v("Map")]),t._v("、"),a("code",[t._v("Set")]),t._v("）提供一个统一、简便的访问接口")]),t._v(" "),a("li",[t._v("使得数据结构的成员能够按某种次序排列")]),t._v(" "),a("li",[t._v("ES6 创造了一种新的遍历命令 "),a("code",[t._v("for...of")]),t._v(" 循环，iterator 接口主要供 "),a("code",[t._v("for...of")]),t._v(" 消费")])]),t._v(" "),a("h2",{attrs:{id:"iterator-遍历过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-遍历过程"}},[t._v("#")]),t._v(" iterator 遍历过程")]),t._v(" "),a("ul",[a("li",[t._v("创建一个指针对象，指向当前数据结构的起始位置，遍历器本身就是一个指针对象")]),t._v(" "),a("li",[t._v("第一次调用指针对象的 "),a("code",[t._v("next")]),t._v("，指针指向数据结构的第一个成员")]),t._v(" "),a("li",[t._v("第二次调用指针对象的 "),a("code",[t._v("next")]),t._v("，指针指向数据结构的第二个成员")]),t._v(" "),a("li",[t._v("不断调用指针对象的 "),a("code",[t._v("next")]),t._v("，直至它指向数据结构的结束位置")])]),t._v(" "),a("p",[t._v("每次调用 "),a("code",[t._v("next")]),t._v("，都返回一个包含 "),a("code",[t._v("value")]),t._v(" 和 "),a("code",[t._v("done")]),t._v(" 的对象")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("value")]),t._v(": 当前成员的值")]),t._v(" "),a("li",[a("code",[t._v("done")]),t._v(": 表示遍历是否结束")])]),t._v(" "),a("h2",{attrs:{id:"默认-iterator-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认-iterator-接口"}},[t._v("#")]),t._v(" 默认 iterator 接口")]),t._v(" "),a("p",[t._v("当使用 "),a("code",[t._v("for...of")]),t._v(" 时就会自动去找 iterator 接口")]),t._v(" "),a("p",[t._v("一种数据结构只要部署了 iterator 接口，我们就称其为“可遍历的”")]),t._v(" "),a("p",[t._v("ES6 规定，默认的 iterator 部署在 "),a("code",[t._v("Symbol.iterator")])]),t._v(" "),a("p",[t._v("ES6 有些数据结构原生具备 iterator 接口（比如数组），不用做任何处理，就可以被 "),a("code",[t._v("for...of")]),t._v(" 遍历，一些数据结构则没有（比如对象）。")]),t._v(" "),a("p",[t._v("原生具备了 iterator 接口的数据结构:")]),t._v(" "),a("ul",[a("li",[t._v("Array")]),t._v(" "),a("li",[t._v("Map")]),t._v(" "),a("li",[t._v("Set")]),t._v(" "),a("li",[t._v("String")]),t._v(" "),a("li",[t._v("TypedArray")]),t._v(" "),a("li",[t._v("函数的 arguments 对象")]),t._v(" "),a("li",[t._v("NodeList 对象")])]),t._v(" "),a("p",[t._v("对象之所有没有默认 iterator 接口，是因为遍历的顺序不确定，需要开发者手动指定。本质上，遍历器是一种线性处理，部署了遍历器接口就相当于部署一种线性转换")]),t._v(" "),a("p",[t._v("如果 "),a("code",[t._v("Symbol.iterator")]),t._v(" 方法对应的不是遍历器生成函数（即返回一个遍历器对象），则会报错")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError: [] is not a function")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"调用-iterator-的场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用-iterator-的场合"}},[t._v("#")]),t._v(" 调用 iterator 的场合")]),t._v(" "),a("ul",[a("li",[t._v("解构赋值")]),t._v(" "),a("li",[t._v("扩展运算符，只要某个数据结构部署了 iterator 接口，就可以对它使用扩展运算符转为数组")]),t._v(" "),a("li",[a("code",[t._v("yield*")]),t._v(" 后面跟的是一个可遍历结构，它会调用该结构的遍历器接口")]),t._v(" "),a("li",[t._v("任何接受数组为参数的场合，因为数据的遍历会调用遍历器接口\n"),a("ul",[a("li",[a("code",[t._v("for...of")])]),t._v(" "),a("li",[a("code",[t._v("Array.from")])]),t._v(" "),a("li",[a("code",[t._v("Map()")]),t._v(", "),a("code",[t._v("Set()")]),t._v(", "),a("code",[t._v("WeakMap()")]),t._v(", "),a("code",[t._v("WeakSet()")])]),t._v(" "),a("li",[a("code",[t._v("Promise.all")])]),t._v(" "),a("li",[a("code",[t._v("Promise.race")])])])])]),t._v(" "),a("h2",{attrs:{id:"for-of-优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of-优点"}},[t._v("#")]),t._v(" "),a("code",[t._v("for...of")]),t._v(" 优点")]),t._v(" "),a("ul",[a("li",[t._v("语法简洁")]),t._v(" "),a("li",[t._v("不同于 "),a("code",[t._v("forEach")]),t._v(", 可以使用 "),a("code",[t._v("break")]),t._v(", "),a("code",[t._v("continue")]),t._v(", "),a("code",[t._v("return")])]),t._v(" "),a("li",[t._v("提供了遍历所有数据结构的统一操作接口")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://bes6.ruanyifeng.com/#docs/iterator",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 6 入门 by 阮一峰"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=v.exports}}]);