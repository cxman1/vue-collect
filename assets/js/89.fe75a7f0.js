(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{593:function(t,a,s){"use strict";s.r(a);var e=s(4),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"数组是一种线性表数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组是一种线性表数据结构"}},[t._v("#")]),t._v(" 数组是一种线性表数据结构")]),t._v(" "),s("p",[t._v("线性表（Linear List），就是数据排成一条像线一样的结构，每个线性表上的数据最多只有前和后两个方向。链表，队列，栈等也是线性表结构。")]),t._v(" "),s("p",[t._v("非线性表，如二叉树，堆，图等，数据之间不是简单的前后关系。")]),t._v(" "),s("h2",{attrs:{id:"数组随机访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组随机访问"}},[t._v("#")]),t._v(" 数组随机访问")]),t._v(" "),s("p",[s("code",[t._v("a[i]_address = base_address + i * data_type_size")])]),t._v(" "),s("p",[t._v("通过公式计算出数组下标对应的内存地址，从而实现随机访问")]),t._v(" "),s("h2",{attrs:{id:"为什么从-0-开始编号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么从-0-开始编号"}},[t._v("#")]),t._v(" 为什么从 0 开始编号")]),t._v(" "),s("p",[t._v("从数组存储的模型看，“下标”最确切的定义是“偏移（offset）”。")]),t._v(" "),s("p",[t._v("如果从 1 开始编号")]),t._v(" "),s("p",[s("code",[t._v("a[k]_address = base_address + (k-1) * data_type_size")])]),t._v(" "),s("ul",[s("li",[t._v("每次随机访问都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令")]),t._v(" "),s("li",[t._v("C 语言设计者用 0 开始计数数组下标，之后的语言都效仿了 C 语言，为了在一定程度上减少学习成本")])])])}),[],!1,null,null,null);a.default=_.exports}}]);